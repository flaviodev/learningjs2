{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","negociacao","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","adiciona","catch","console","log","erro","Error","Promise","resolve","reject","get","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","arrayAchatado","array","concat","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n\n        this._http = new HttpService();\n    }\n\n    cadastra(negociacao) {\n\n        return ConnectionFactory.getConnection()\n           .then(connection => new NegociacaoDao(connection))\n           .then(dao => dao.adiciona(negociacao))\n           .then(() => 'Negociação cadastrada com sucesso')\n           .catch(erro => {\n              console.log(erro);\n              throw new Error('Não foi possível adicionar a negociação')\n           });\n   }\n\n    obterNegociacoesDaSemana() {\n\n        // retornando uma promisse da promisse\n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                })\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                })\n        });\n    }\n\n    obterNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            // recurso extremamente útil para 'encadear' diversas promisses \n            Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()]\n            ).then(negociacoes => resolve(negociacoes.reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])))\n            .catch(erro => reject(erro));  \n        });\n    }\n\n    lista() {\n\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações')\n            });\n    }\n\n    apaga() {\n\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                  console.log(erro);\n                  throw new Error('Não foi possível apagar as negociações')\n            });\n    }\n\n    importa(listaAtual) {\n\n        // funcao some itera o array e quando encontra o elemento para de efetaur a iteracao\n        // nesse caso a filtragem é para buscar o diff da importação com o que já existe (por isso a negação no some)\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error(\"Não foi possível importar as negociações\");\n            });\n    }\n\n}"]}