{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","currentVersion","dbName","migrations","version","migration","forEach","connection","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","e","target","result","onsuccess","bind","onerror","error","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA,kB,GAAS,CAAC,aAAD,C;AACTC,0B,GAAiB,C;AACjBC,kB,GAAS,Y;AAETC,sB,GAAa,E;;AACnBA,uBAAW,CAAX,IAAgB,EAAEC,SAAS,CAAX,EAAcC,WAAW;AAAA,2BAAcL,OAAOM,OAAP,CAAe,iBAAS;AACvE,4BAAGC,WAAWC,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIH,WAAWI,iBAAX,CAA6BD,KAA7B;;AAEJH,mCAAWK,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,qBALkD,CAAd;AAAA,iBAAzB,EAAhB;;AAOIN,sB,GAAa,I;AACbO,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH;;;;oDAEsB;;AAEnB;AACA,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBrB,MAAtB,EAA6BD,cAA7B,CAAlB;;AAEAmB,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BC,wCAAQC,GAAR,CAAY,iCAAZ;AACAvB,2CAAWF,cAAX,EAA2BI,SAA3B,CAAqCsB,EAAEC,MAAF,CAASC,MAA9C;AACH,6BAJD;;AAMAT,wCAAYU,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAACvB,UAAJ,EAAgB;AACZA,iDAAaoB,EAAEC,MAAF,CAASC,MAAtB;AACAf,4CAAQP,WAAWO,KAAX,CAAiBiB,IAAjB,CAAsBxB,UAAtB,CAAR;;AAEA;AACAA,+CAAWO,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQX,UAAR;AACH,6BAZD;;AAcAa,wCAAYY,OAAZ,GAAsB,aAAK;;AAEvBb,uCAAOQ,EAAEC,MAAF,CAASH,OAAT,CAAiBQ,KAAjB,CAAuBC,IAA9B;AACH,6BAHD;AAIH,yBA5BM,CAAP;AA6BH;;;sDAEuB;;AAEpB,4BAAG3B,UAAH,EAAc;;AAEVO;AACAP,yCAAa,IAAb;AACAO,oCAAQ,IAAR;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["// module pattern -> isola os atritubos das função, pois uma vez que es6 não possui variaveis \n//    estáticas essa é a forma de criar variáveis acessíveis em um escopo estático de forma isolada\nconst stores = ['negociacoes'];\nconst currentVersion = 1;\nconst dbName = 'aluraframe';\n\nconst migrations = [];\nmigrations[1] = { version: 1, migration: connection => stores.forEach(store => {\n        if(connection.objectStoreNames.contains(store)) \n            connection.deleteObjectStore(store);\n\n        connection.createObjectStore(store, { autoIncrement: true });\n    })};\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n    \n        throw new Error('Não é possível criar uma instância de Connection Factory');\n    }\n\n    static getConnection() {\n\n        // exemplo de como criar uma promisse\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName,currentVersion);\n\n            openRequest.onupgradeneeded = e => {\n                \n                console.log('Cria ou altera banco existente!');\n                migrations[currentVersion].migration(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n\n                if(!connection) { \n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n\n                    // monkey patch -> override da função\n                    connection.close = function() {\n                        throw new Error('Você não pode fechar a conexão diretamente');\n                    }\n                }\n                resolve(connection);\n            };\n    \n            openRequest.onerror = e => {\n    \n                reject(e.target.console.error.name);\n            };\n        });\n    }\n\n    static closeConnection(){\n\n        if(connection){\n\n            close();\n            connection = null;\n            close = null;\n        }\n    }\n\n}"]}